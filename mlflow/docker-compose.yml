version: '3'

services:
  minio-s3:
    image: minio/minio:latest
    container_name: minio-s3
    hostname: srv.meaningfy.ws
    ports:
      - 9000:9000
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    command:
      server /data
    networks:
      - elk
    volumes:
      - s3-disk:/data


  postgresql:
    image: postgres:10.15
    container_name: postgresql
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${MLFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${MLFLOW_POSTGRES_PASSWORD}
      POSTGRES_DB: mlflow-db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    hostname: postgresql
    restart: always
    networks:
      - elk


  waitfordb:
    image: dadarek/wait-for-dependencies
    depends_on:
      - postgresql
      - sftp
    command: postgresql:5432

  mlflow_tracker:
    container_name: mlflow_tracker
    image: mlflow_tracker
    hostname: srv.meaningfy.ws
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - postgresql
      - waitfordb
      - sftp
    environment:
#      DB_URI: postgresql+psycopg2://${MLFLOW_POSTGRES_USER}:${MLFLOW_POSTGRES_PASSWORD}@postgresql:5432/mlflow-db
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
#      MLFLOW_PORT: ${MLFLOW_PORT}
#      MLFLOW_S3_BUCKET_NAME: ${MLFLOW_S3_BUCKET_NAME:-mlflow}
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      AWS_DEFAULT_REGION: ${MINIO_REGION}
      VIRTUAL_HOST: ${MLFLOW_HOST}
      VIRTUAL_PORT: ${MLFLOW_PORT}
      LETSENCRYPT_HOST: ${MLFLOW_HOST}
      LETSENCRYPT_EMAIL: example@gmail.com
    ports:
      - ${MLFLOW_PORT}:${MLFLOW_PORT}
#    expose:
#      - ${MLFLOW_PORT}
#      - 443
#    volumes:
#      - mlflow_artifacts:/usr/app
#    entrypoint: mlflow server --host 0.0.0.0 --port ${MLFLOW_PORT}
    entrypoint: mlflow server --host 0.0.0.0 --port ${MLFLOW_PORT} --backend-store-uri postgresql+psycopg2://${MLFLOW_POSTGRES_USER}:${MLFLOW_POSTGRES_PASSWORD}@postgresql:5432/mlflow-db --default-artifact-root s3://${MLFLOW_S3_BUCKET_NAME}/
#    entrypoint: mlflow server --host 0.0.0.0 --port ${MLFLOW_PORT} --backend-store-uri postgresql+psycopg2://${MLFLOW_POSTGRES_USER}:${MLFLOW_POSTGRES_PASSWORD}@postgresql:5432/mlflow-db --default-artifact-root sftp://${MLFLOW_SFTP_USER}:${MLFLOW_SFTP_PASSWORD}@sftp:${MLFLOW_SFTP_PORT}
    networks:
      - elk

#  nginx-proxy:
#    image: jwilder/nginx-proxy
#    container_name: nginx-proxy
#    restart: always
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - ./${HOST}:/etc/nginx/htpasswd/${HOST}
#      - html:/usr/share/nginx/html
#      - dhparam:/etc/nginx/dhparam
#      - vhost:/etc/nginx/vhost.d
#      - certs:/etc/nginx/certs:ro
#      - /var/run/docker.sock:/tmp/docker.sock:ro
#      - conf:/etc/nginx/conf.d
#    environment:
#      DEFAULT_HOST: ${HOST}
#      DHPARAM_GENERATION: "false"
#      HTTPS_METHOD: noredirect
#    labels:
#      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"
#
#
#  letsencrypt-nginx-proxy-companion:
#    image: jrcs/letsencrypt-nginx-proxy-companion
#    container_name: nginx-proxy-lets-encrypt
#    restart: always
#    depends_on:
#      - nginx-proxy
#    volumes:
#      - conf:/etc/nginx/conf.d
#      - certs:/etc/nginx/certs:rw
#      - vhost:/etc/nginx/vhost.d
#      - html:/usr/share/nginx/html
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#    environment:
#      NGINX_PROXY_CONTAINER: nginx-proxy

#networks:
#  elk:
#    driver: bridge
#  frontend:
#      driver: bridge
#  backend:
#      driver: bridge

volumes:
#  mlflow_artifacts:
  postgres_store:
  elasticsearch:
  s3-disk:

  certs:
  html:
  vhost:
  dhparam:
  conf:
