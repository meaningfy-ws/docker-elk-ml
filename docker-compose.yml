version: '3.2'

services:
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx16G -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

  notebook:
    image: jupyter/datascience-notebook
    container_name: jupyter-notebook-srv
    command: "start-notebook.sh \
            --NotebookApp.password=${JUPYTER_PASSWORD} \
            --NotebookApp.token=${JUPYTER_TOKEN}"
    volumes:
      - work:/home/jovyan/work
    ports:
      - ${JUPYTER_PORT}:8888
    networks:
      - elk


#  postgres:
#    build:
#      context: ./postgres-docker
#    restart: always
#    environment:
#        POSTGRES_PASSWORD: 'admin'
#    ports:
#      - "5433:5432"
#    volumes:
#      - postgres_store:/var/lib/postgresql/data
#    networks:
#      - elk

   mlflow_tracker:
    container_name: mlflow_tracker
    image: mlflow_tracker
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    ports:
      - ${MLFLOW_PORT}:${MLFLOW_PORT}
    volumes:
      - mlflow_artifacts:/usr/app
    entrypoint: mlflow server --host 0.0.0.0 --port ${MLFLOW_PORT}
    networks:
      - elk

  apache_tika:
    container_name: apache_tika
    image: apache/tika
    ports:
      - 9998:9998
    networks:
      - elk


    postgres:
        image: postgres:9.6
        environment:
            - POSTGRES_USER=airflow
            - POSTGRES_PASSWORD=airflow
            - POSTGRES_DB=airflow
        logging:
            options:
                max-size: 10m
                max-file: "3"
        networks:
          - elk

    webserver:
        build:
            context: ./airflow
            dockerfile: Dockerfile
        restart: always
        depends_on:
            - postgres
        environment:
            - LOAD_EX=n
            - EXECUTOR=Local
        logging:
            options:
                max-size: 10m
                max-file: "3"
        volumes:
            - ./airflow/dags:/usr/local/airflow/dags
            # - ./plugins:/usr/local/airflow/plugins
        ports:
            - "8080:8080"
        command: webserver
        healthcheck:
            test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
            interval: 30s
            timeout: 30s
            retries: 3
        networks:
          - elk

networks:
  elk:
    driver: bridge

volumes:
  work:
    external:
      name: jupyter-notebook
  mlflow_artifacts:
    external:
      name: mlflow_artifacts
#  postgres_store:
#    external:
#      name: postgres_store
  elasticsearch:

